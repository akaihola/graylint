---
name: test-future

# This workflow detects breakage against upcoming releases of dependencies
# even in the absence of activity in Graylint's own repository.

on:  # yamllint disable-line rule:truthy
  schedule:
    - cron: "05 20 * * 6"

jobs:
  test-future:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: 'main'
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/setup.cfg
            **/pyproject.toml
      - name: Install dependencies
        run: |
          uv venv
          uv pip install \
            --upgrade \
            --requirements=constraints-future.txt \
            -e '.[color,test]' packaging pyproject-parser
      - name: Test with pytest
        run: |
          pytest
      - name: Note a possible dependency incompatibility and required actions
        if: failure()
        shell: python
        run: |
          import json
          import os
          import urllib.request
          from importlib.metadata import version
          from packaging.requirements import InvalidRequirement, Requirement
          from packaging.version import Version
          from pathlib import Path
          from setuptools.config.setupcfg import read_configuration
          from textwrap import dedent

          setup_cfg = read_configuration("setup.cfg")
          for constraint in setup_cfg["options"]["install_requires"]:
              try:
                  requirement = Requirement(constraint)
              except InvalidRequirement:
                  continue
              if any(
                  specifier.operator in ["<", "<=", "~="]
                  for specifier in requirement.specifier
              ):
                  continue
              linenum, line = next(
                  (_, l) for _, l in enumerate(Path("setup.cfg").open())
                  if l.strip() == constraint
              )
              end_column = len(line)
              column = end_column - len(line.strip())
              response = urllib.request.urlopen(
                  f'https://pypi.org/pypi/{requirement.name}/json'
              ).read().decode()
              latest_version = max(
                  Version(s)
                  for s in json.loads(response)['releases'].keys()
              )

              print(
                  dedent(
                      f"""
                      ### :x: Future dependency incompatibility? :x:

                      You could add a maximum version constraint for a dependency on
                      `setup.cfg` line {linenum+1}, e.g.
                      `{constraint},<={latest_version}`

                      See [#382](/akaihola/darker/issues/382)
                      for more information
                      """
                  ),
                  file=open(os.getenv("GITHUB_STEP_SUMMARY"), "a"),
              )

              print(
                  "::notice "
                  "file=setup.cfg,"
                  f"line={linenum+1},"
                  f"col={column},"
                  f"endColumn={end_column},"
                  "title=Future dependency incompatibility?::"
                  "You could add a maximum version constraint for a dependency "
                  f"here, e.g. {constraint},<={latest_version}"
              )
              break

          else:
              raise RuntimeError(">= line not found in setup.cfg")
